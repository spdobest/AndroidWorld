apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

// Creates a variable called keystorePropertiesFile, and initializes it to the
// keystore.properties file.
def keystorePropertiesFile = rootProject.file("keystore.properties")

// Initializes a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Loads the keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))


android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "spm.androidworld.all"
        minSdkVersion 24
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"


        // Creates a property for the FileProvider authority.
        def filesAuthorityValue = applicationId + ".files"
        // Creates a placeholder property to use in the manifest.
        manifestPlaceholders =
                [filesAuthority: filesAuthorityValue]
        // Adds a new field for the authority to the BuildConfig class.
        buildConfigField("String",
                "FILES_AUTHORITY",
                "\"${filesAuthorityValue}\"")

    }

    signingConfigs {
        // Creates a signing configuration called "release".

        config {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }

        release {
            // Specifies the path to your keystore file.
            storeFile file("my-release-key.jks")
            // Specifies the password for your keystore.
            storePassword "password"
            // Specifies the identifying name for your key.
            keyAlias "my-alias"
            // Specifies the password for your key.
            keyPassword "password"
        }
    }

    buildTypes {

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            applicationIdSuffix ".debug"
            debuggable true
        }

        /**
         * The `initWith` property allows you to copy configurations from other build types,
         * then configure only the settings you want to change. This one copies the debug build
         * type, and then changes the manifest placeholder and application ID.
         */
        staging {
            initWith debug
            manifestPlaceholders = [hostName: "internal.example.com"]
            applicationIdSuffix ".debugStaging"
        }
    }

    // Specifies one flavor dimension.
    flavorDimensions "version"
    productFlavors {
        demo {
            // Assigns this product flavor to the "version" flavor dimension.
            // If you are using only one dimension, this property is optional,
            // and the plugin automatically assigns all the module's flavors to
            // that dimension.
            dimension "version"
            applicationIdSuffix ".demo"
            versionNameSuffix "-demo"
        }
        full {
            dimension "version"
            applicationIdSuffix ".full"
            versionNameSuffix "-full"
        }
    }

    lintOptions {
        // Turns off checks for the issue IDs you specify.
        disable 'TypographyFractions', 'TypographyQuotes'
        // Turns on checks for the issue IDs you specify. These checks are in
        // addition to the default lint checks.
        enable 'RtlHardcoded', 'RtlCompat', 'RtlEnabled'
        // To enable checks for only a subset of issue IDs and ignore all others,
        // list the issue IDs with the 'check' property instead. This property overrides
        // any issue IDs you enable or disable using the properties above.
        check 'NewApi', 'InlinedApi'
        // If set to true, turns off analysis progress reporting by lint.
        quiet true
        // if set to true (default), stops the build if errors are found.
        abortOnError false
        // if true, only report errors.
        ignoreWarnings true
    }
    /**
     * DATA BINDING
     */
    dataBinding.enabled = true
    androidExtensions {
        experimental = true
    }
}

dependencies {
    /**
     * GET ALL ANDROIDX DEPENDENCIES HERE
     * https://developer.android.com/jetpack/androidx/migrate
     */
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.core:core-ktx:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.google.android.material:material:1.1.0-alpha09'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.google.android.material:material:1.1.0-alpha09'

    /**
     * RX JAVA
     */
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.9'
    /**
     * DAGGER2
     */
    implementation 'com.google.dagger:dagger-android:2.24'
    implementation 'com.google.dagger:dagger-android-support:2.24' // if you use the support libraries
    kapt 'com.google.dagger:dagger-android-processor:2.24'
    kapt 'com.google.dagger:dagger-compiler:2.24'

    /**
     * RETROFIT 2
     */
    implementation 'com.squareup.retrofit2:retrofit:2.5.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.5.0'

    /**
     * ********************************JETPACK********************************
     */
    // ANDROID KTX
    // https://developer.android.com/kotlin/ktx.html
    implementation 'androidx.core:core-ktx:1.0.2'

    /***************** DATA BINDING ***************/

    /***************** BENCH MARK ****************/
    //https://developer.android.com/studio/profile/benchmark.html
    androidTestImplementation "androidx.benchmark:benchmark-junit4:1.0.0-alpha04"

    /***************** PAGING *******************/
    def paging_version = "2.1.0"
    implementation "androidx.paging:paging-runtime:$paging_version" // For Kotlin use paging-runtime-ktx
    // alternatively - without Android dependencies for testing
    testImplementation "androidx.paging:paging-common:$paging_version" // For Kotlin use paging-common-ktx
    // optional - RxJava support
    implementation "androidx.paging:paging-rxjava2:$paging_version" // For Kotlin use paging-rxjava2-ktx

    /******************* WORK MANAGER ***********/

    // https://developer.android.com/jetpack/androidx/releases/work
    def work_version = "2.1.0"
    // (Java only)
    implementation "androidx.work:work-runtime:$work_version"
    // Kotlin + coroutines
    implementation "androidx.work:work-runtime-ktx:$work_version"
    // optional - RxJava2 support
    implementation "androidx.work:work-rxjava2:$work_version"
    // optional - Test helpers
    androidTestImplementation "androidx.work:work-testing:$work_version"
    /**
     * LIFECYCLE
     */
    // https://developer.android.com/topic/libraries/architecture/lifecycle
    def lifecycle_version = "2.0.0"
    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    // alternatively - just ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version" // For Kotlin use lifecycle-viewmodel-ktx
    // alternatively - just LiveData
    implementation "androidx.lifecycle:lifecycle-livedata:$lifecycle_version"
    // alternatively - Lifecycles only (no ViewModel or LiveData). Some UI
    //     AndroidX libraries use this lightweight import for Lifecycle
    implementation "androidx.lifecycle:lifecycle-runtime:$lifecycle_version"
    annotationProcessor "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
    // For Kotlin use kapt instead of annotationProcessor
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    // optional - ReactiveStreams support for LiveData
    implementation "androidx.lifecycle:lifecycle-reactivestreams:$lifecycle_version"
    // For Kotlin use lifecycle-reactivestreams-ktx
    // optional - Test helpers for LiveData
    testImplementation "androidx.arch.core:core-testing:$lifecycle_version"

    /**
     * ROOM DATABASE
     */
    def room_version = "2.2.0-beta01"

    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    // For Kotlin use kapt instead of annotationProcessor
    // optional - Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:$room_version"
    // optional - RxJava support for Room
    implementation "androidx.room:room-rxjava2:$room_version"
    // optional - Guava support for Room, including Optional and ListenableFuture
    implementation "androidx.room:room-guava:$room_version"
    // Test helpers
    testImplementation "androidx.room:room-testing:$room_version"

    /**
     * NAVIGATION
     */
    //https://developer.android.com/guide/navigation/navigation-pass-data
    def nav_version = "2.1.0-rc01"
    def nav_dep = "2.2.0-alpha01"
    // Java
    /* implementation "androidx.navigation:navigation-fragment:$nav_version"
    implementation "androidx.navigation:navigation-ui:$nav_version"
    */
    // Kotlin
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_dep"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_dep"
    /**
     * FUTURE
     */
    //https://developer.android.com/reference/java/util/concurrent/Future
    /*
    def futures_version = "1.0.0-rc01"
    implementation "androidx.concurrent:concurrent-futures:$futures_version"
    implementation "androidx.concurrent:concurrent-listenablefuture:$futures_version"
    implementation "androidx.concurrent:concurrent-listenablefuture-callback:$futures_version"
    */

    /**
     * TESTING
     */
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    /**
     * ANDROID SECURITY
     */
    def security_version = "1.0.0-alpha02"
    implementation "androidx.security:security-crypto:$security_version"

    /**
     * BIOMETRIC
     */
    implementation 'androidx.biometric:biometric:1.0.0-alpha04'
}
